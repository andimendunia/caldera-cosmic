Form
- Batch information (incl. batch type)
- According to batch recipe, show procedure and start timer
- Actively listen to serial procedure


Gambaran umum apl. proses OMV v.2

Phase 1
In OMV
- Minta informasi dasar batch ke user yang sedang login.
- Tunjukkan prosedur penggilingan batch sesuai resep yang di pilih.
- Baca beban setiap 1 detik sekali (melalui localhost python yang kemudian membaca serial arduino).
- Jika beban melewati threshold mulai timer karena mengindikasikan material sudah masuk.
- Jika timer mulai habis, perbolehkan user untuk menekan tombol selesai.
- Kirim informasi batch dan hasil penggilingan (under or over) ke database Caldera. 
- Cetak label identitas batch.

Phase 2
In Rheometer
- 

Phase 3
Trial
-


Phase 4
Debug


Phase 5
Add offline capability

omv_recipes
. name 
. type (original, mix, scrap)

omv_recipe_steps
. omv_recipe_id
. order
. duration
. description

omv_metrics
. omv_recipe_id
. user1_id
. user2_id
. eval (too soon, ok, too late)

omv_recipe_steps_captures
. omv_recipe_step_id
. delay

omv_captures
. filename 
. omv_metrics_id

when submits:
. handshake table recipes, recipes_steps to server whether it matches with server.
. if handshake cannot be done because server can't be contacted, save data and photo captures locally.
. if handshake can be done but server says it doesn't match, log as an error and discard photo captures
. if handshake can be done and matches with the server, server would save it into database then upload photo captures to server.

python app
. listen for localhost:91/ampere-info then get serial data from Arduino then return it
. listen for localhost:91/camera-stream then access the local webcam then return it as stream

alpine data

user_1_id
user_2_id
eval
recipe_id
recipe_name
recipe_type
recipe_steps [ [duration, description], [duration, description] ]
recipe_steps_captures [ [delay], [delay] ]

timerData()

